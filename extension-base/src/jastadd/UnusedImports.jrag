import java.util.HashSet;


aspect UnusedImports {

    syn String FieldDecl.accessType() = getTypeAccess().nodeType();
    syn String VarDeclStmt.accessType() = getTypeAccess().nodeType();
    syn String ParameterDeclaration.accessType() = getTypeAccess().nodeType();
    syn String FieldDecl.variableTypeName() = getTypeAccess().myTypeName();
    syn String ParameterDeclaration.variableTypeName() = getTypeAccess().myTypeName();

    syn String Access.myTypeName() = typeName();
    eq  ParTypeAccess.myTypeName() = getTypeAccess().typeName();

    syn String VarDeclStmt.localVariableTypeName() = getTypeAccess().myTypeName();
    syn String ClassDecl.accessType() { return hasSuperClass() ? getSuperClass().nodeType() : ""; }
    syn String ClassDecl.superClassName() { return hasSuperClass() ? getSuperClass().typeName() : ""; }
    syn String Access.nodeType() = "";
    eq PrimitiveTypeAccess.nodeType() = "PrimitiveTypeAccess";
    eq ParTypeAccess.nodeType() = "ParTypeAccess";
    eq TypeAccess.nodeType() = "TypeAccess";
    eq Dot.nodeType() = "Dot" ;


    coll HashSet<String> CompilationUnit.usedTypes() [new HashSet<String>()] with add root CompilationUnit;
    coll HashSet<String> CompilationUnit.usedTypesList() [new HashSet<String>()] with addAll root CompilationUnit;
    coll HashSet<SingleTypeImportDecl> CompilationUnit.importTypes() [new HashSet<SingleTypeImportDecl>()] with add root CompilationUnit;


    FieldDecl contributes variableTypeName()
		when getTypeAccess().nodeType().equals("ParTypeAccess")
		to CompilationUnit.usedTypes()
        for compilationUnit();

    FieldDecl contributes variableTypeName()
    	when getTypeAccess().nodeType().equals("TypeAccess")
    	to CompilationUnit.usedTypes()
        for compilationUnit();

    ParameterDeclaration contributes variableTypeName()
    	when getTypeAccess().nodeType().equals("ParTypeAccess")
    	to CompilationUnit.usedTypes()
        for compilationUnit();

    VarDeclStmt contributes getTypeAccess().TypeArguments()
        when getTypeAccess().nodeType().equals("ParTypeAccess")
        to CompilationUnit.usedTypesList()
        for compilationUnit();

    FieldDecl contributes getTypeAccess().TypeArguments()
        when getTypeAccess().nodeType().equals("ParTypeAccess")
        to CompilationUnit.usedTypesList()
        for compilationUnit();

    syn HashSet<String> Access.TypeArguments() = null;

    eq ParTypeAccess.TypeArguments() {

        HashSet<String> temp = new HashSet<String>();

        for(Access a : getTypeArgumentList()) {
            temp.add(a.uberID());
        }

        return temp;
    }

    ParameterDeclaration contributes variableTypeName()
        when getTypeAccess().nodeType().equals("TypeAccess")
        to CompilationUnit.usedTypes()
        for compilationUnit();

    VarDeclStmt contributes localVariableTypeName()
    	when getTypeAccess().nodeType().equals("ParTypeAccess")
    	to CompilationUnit.usedTypes()
        for compilationUnit();

    VarDeclStmt contributes localVariableTypeName()
        when getTypeAccess().nodeType().equals("TypeAccess")
        to CompilationUnit.usedTypes()
        for compilationUnit();

    ClassDecl contributes superClassName()
        when accessType().equals("ParTypeAccess")
        to CompilationUnit.usedTypes()
        for compilationUnit();

    ClassDecl contributes superClassName()
        when accessType().equals("TypeAccess")
        to CompilationUnit.usedTypes()
        for compilationUnit();

    CastExpr contributes getTypeAccess().uberID()
        to CompilationUnit.usedTypes()
        for compilationUnit();

    ClassInstanceExpr contributes getAccess().uberID()
    to CompilationUnit.usedTypes()
    for compilationUnit();


    SingleTypeImportDecl contributes this
        to CompilationUnit.importTypes()
        for compilationUnit();





    syn String Access.uberID() = "IHAVENOIDEAWHATIAMNOOOSUKA";
    eq TypeAccess.uberID() = getID();
    eq Dot.uberID() = getRight().dotSpecialCaseOnlyOneTimeUseVeryGoodAttributeID();

    syn String Access.dotSpecialCaseOnlyOneTimeUseVeryGoodAttributeID() = "";
    eq TypeAccess.dotSpecialCaseOnlyOneTimeUseVeryGoodAttributeID() = getID();

    syn HashSet<Integer> CompilationUnit.killableLines() {
        HashSet<Integer> killable = new HashSet<Integer>();
        for(SingleTypeImportDecl s : importTypes()) {
            HashSet<String> all = new HashSet<String>();
            all.addAll(usedTypes());
            all.addAll(usedTypesList());
            if( !all.contains(s.getAccess().uberID()) && !variableAccess().contains(s.getAccess().uberID())){
                killable.add(s.lineNumber());
            }
        }
        for(SingleStaticImportDecl st : staticImports()) {
            if(!staticMethods().contains(st.getID()) && !variableAccess().contains(st.getID())) {
                killable.add(st.lineNumber());
            }
        }

        return killable;

    }

}
