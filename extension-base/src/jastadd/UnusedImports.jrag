import java.util.HashSet;


aspect UnusedImports {

    syn String FieldDecl.accessType() = getTypeAccess().nodeType();
    syn String VarDeclStmt.accessType() = getTypeAccess().nodeType();
    syn String ParameterDeclaration.accessType() = getTypeAccess().nodeType();
    syn String FieldDecl.varibleTypeName() {
        if(accessType().equals("ParTypeAccess")) {
            return ((ParTypeAccess)getTypeAccess()).getTypeAccess().typeName();
        }
        return getTypeAccess().typeName();
    }
    syn String ParameterDeclaration.varibleTypeName() {
        if(accessType().equals("ParTypeAccess")) {
            return ((ParTypeAccess)getTypeAccess()).getTypeAccess().typeName();
        }
        return getTypeAccess().typeName();
    }
    syn String VarDeclStmt.localVaribleTypeName() = getTypeAccess().typeName();
    syn String ClassDecl.accessType() { return hasSuperClass() ? getSuperClass().nodeType() : ""; }
    syn String ClassDecl.superClassName() { return hasSuperClass() ? getSuperClass().typeName() : ""; }
    syn String Access.nodeType() = "";
    eq PrimitiveTypeAccess.nodeType() = "PrimitiveTypeAccess";
    eq ParTypeAccess.nodeType() = "ParTypeAccess";
    eq TypeAccess.nodeType() = "TypeAccess";

    coll HashSet<String> CompilationUnit.usedTypes() [new HashSet<String>()] with add root CompilationUnit;
    coll HashSet<SingleTypeImportDecl> CompilationUnit.importTypes() [new HashSet<SingleTypeImportDecl>()] with add root CompilationUnit;



    FieldDecl contributes varibleTypeName()
		when getTypeAccess().nodeType().equals("ParTypeAccess")
		to CompilationUnit.usedTypes()
        for compilationUnit();

    FieldDecl contributes varibleTypeName()
    	when getTypeAccess().nodeType().equals("TypeAccess")
    	to CompilationUnit.usedTypes()
        for compilationUnit();

    ParameterDeclaration contributes varibleTypeName()
    	when getTypeAccess().nodeType().equals("ParTypeAccess")
    	to CompilationUnit.usedTypes()
        for compilationUnit();

    ParameterDeclaration contributes varibleTypeName()
        when getTypeAccess().nodeType().equals("TypeAccess")
        to CompilationUnit.usedTypes()
        for compilationUnit();

    VarDeclStmt contributes localVaribleTypeName()
    	when getTypeAccess().nodeType().equals("ParTypeAccess")
    	to CompilationUnit.usedTypes()
        for compilationUnit();

    VarDeclStmt contributes localVaribleTypeName()
        when getTypeAccess().nodeType().equals("TypeAccess")
        to CompilationUnit.usedTypes()
        for compilationUnit();

    ClassDecl contributes superClassName()
        when accessType().equals("ParTypeAccess")
        to CompilationUnit.usedTypes()
        for compilationUnit();

    ClassDecl contributes superClassName()
        when accessType().equals("TypeAccess")
        to CompilationUnit.usedTypes()
        for compilationUnit();


    SingleTypeImportDecl contributes this
        to CompilationUnit.importTypes()
        for compilationUnit();


    syn HashSet<Integer> CompilationUnit.killableLines() {
        HashSet<Integer> killable = new HashSet<Integer>();
        for(SingleTypeImportDecl s : importTypes()) {
            if(!usedTypes().contains(((TypeAccess)(s.getAccess())).getID())){
                killable.add(s.lineNumber());
            }
        }
        return killable;

    }

}
