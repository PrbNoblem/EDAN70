import java.util.HashSet;


aspect UnusedImports {

    syn String FieldDecl.AccessType() = getTypeAccess().nodeType();
    syn String Access.nodeType() = "";
    eq PrimitiveTypeAccess.nodeType() = "PrimitiveTypeAccess";
    eq ParTypeAccess.nodeType() = "ParTypeAccess";
    eq TypeAccess.nodeType() = "TypeAccess";

    coll HashSet<String> CompilationUnit.usedTypes() [new HashSet<String>()] with add root CompilationUnit;
    coll HashSet<SingleTypeImportDecl> CompilationUnit.importTypes() [new HashSet<SingleTypeImportDecl>()] with add root CompilationUnit;



    FieldDecl contributes ((ParTypeAccess)getTypeAccess()).getTypeAccess().typeName()
		when getTypeAccess().nodeType().equals("ParTypeAccess")
		to CompilationUnit.usedTypes()
        for compilationUnit();

    FieldDecl contributes getTypeAccess().typeName()
    	when getTypeAccess().nodeType().equals("TypeAccess")
    	to CompilationUnit.usedTypes()
        for compilationUnit();


    SingleTypeImportDecl contributes this
        to CompilationUnit.importTypes()
        for compilationUnit();


    syn HashSet<Integer> CompilationUnit.killableLines() {
        HashSet<Integer> killable = new HashSet<Integer>();
        for(SingleTypeImportDecl s : importTypes()) {
            if(!usedTypes().contains(((TypeAccess)(s.getAccess())).getID())){
                killable.add(s.lineNumber());
            }
        }
        return killable;

    }

}
