
aspect ImportOnDemand {

    coll HashSet<Integer> CompilationUnit.onDemlines() [new HashSet<Integer>()] with add root CompilationUnit;
    coll HashSet<Integer> CompilationUnit.staticOnDemlines() [new HashSet<Integer>()] with add root CompilationUnit;

    syn HashSet<String> CompilationUnit.importTypesOnDemand() {
        HashSet<String> temp = new HashSet<String>();
        for(ImportDecl decl : getImportDeclList()) {
            if(decl.isOnDemand()) {
                HashSet<String> all = new HashSet<String>();
                all.addAll(usedTypes());
                all.addAll(usedTypesList());
                for(String type : all) {
                    if(decl.importedTypes(type).toString().equals("org.extendj.ast.GenericInterfaceDecl") ||
                     decl.importedTypes(type).toString().equals("org.extendj.ast.ClassDecl") ||
                     decl.importedTypes(type).toString().equals("org.extendj.ast.GenericClassDecl") ) {
                         if(!decl.isImportedAlready(type)){
                            temp.add(decl.getAccess().packageName() + "." + type);
                        }
                    }
                }


            }
        }
        return temp;
    }


    syn HashSet<String> CompilationUnit.staticImportsOnDemand() {
        HashSet<String> temp = new HashSet<String>();
        for(ImportDecl decl : getImportDeclList()) {
            if(decl.isOnDemand()) {
                    for(String ma : staticMethods()) {
                        if(!decl.importedMethods(ma).isEmpty() ) {
                            if(!decl.isImportedAlready(ma)){
                               temp.add(decl.getAccess().packageName() + "." + decl.getAccess().uberID() + "." + ma);
                           }
                        }
                    }
                    for(String faderTorsk : variableAccess()){
                        if(decl.importedFields(faderTorsk).toString().equals("org.extendj.ast.FieldDeclarator")){
                            if(!decl.isImportedAlready(faderTorsk)){
                               temp.add(decl.getAccess().packageName() + "." + decl.getAccess().uberID() + "." + faderTorsk);
                           }
                        }
                    }
            }
        }
        return temp;
    }


    TypeImportOnDemandDecl contributes lineNumber()
    when isOnDemand()
    to CompilationUnit.onDemlines()
    for compilationUnit();

    StaticImportOnDemandDecl contributes lineNumber()
    when isOnDemand()
    to CompilationUnit.staticOnDemlines()
    for compilationUnit();

    syn boolean ImportDecl.isImportedAlready(String name) = false;

    eq TypeImportOnDemandDecl.isImportedAlready(String name) {
        for(SingleTypeImportDecl s : compilationUnit().importTypes()) {

                if(importedTypes(name).toString().equals("org.extendj.ast.GenericInterfaceDecl") ||
                 importedTypes(name).toString().equals("org.extendj.ast.ClassDecl") ||
                 importedTypes(name).toString().equals("org.extendj.ast.GenericClassDecl") ) {
                     if(s.getAccess().uberID().equals(name)){
                         return true;
                     }

                 }

         }


         return false;
    }

    eq StaticImportOnDemandDecl.isImportedAlready(String name) {
        for(SingleStaticImportDecl s : compilationUnit().staticImports()) {
            if(s.getID().equals(name)){
                return true;
            }
        }
        return false;
    }

}
