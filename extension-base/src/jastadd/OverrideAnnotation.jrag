aspect OverrideAnnotation {



    coll HashSet<MethodDecl> CompilationUnit.methods() [new HashSet<MethodDecl>()] with add root CompilationUnit;
    coll HashSet<MethodDecl> CompilationUnit.superClassMethods() [new HashSet<MethodDecl>()] with addAll root CompilationUnit;

    MethodDecl contributes this
    to CompilationUnit.methods()
    for compilationUnit();

    ClassDecl contributes getSuperClass().type().compilationUnit().methods()
    when hasSuperClass()
    to CompilationUnit.superClassMethods()
    for compilationUnit();



    syn HashSet<Integer> CompilationUnit.methodLinesWhereWeShouldAddOverrideAnnotation() {
        HashSet<Integer> temp = new HashSet<Integer>();
        for(MethodDecl m : methods()){
            for(MethodDecl sm : superClassMethods()){
                if(m.overrides(sm) && !m.hasOverride()){
                    temp.add(m.lineNumber());
                }
            }
        }
        return temp;


    }
    syn boolean MethodDecl.hasOverride(){
        for(Modifier m :getModifiers().getModifierList()){
            if(m.isOverride()){
                return true;
            }
        }
        return false;
    }
    syn boolean Modifier.isOverride() = false;
    eq Annotation.isOverride() = getAccess().overrider();
    syn boolean Access.overrider() = false;
    eq TypeAccess.overrider() = getID().equals("Override");







}
